---
layout: post
title:  "思考系列--如何学习一门新技术"
date:   2016-08-01 22:43:11
tags: think
---

## 目录结构：

[技术认知的三个层次 ](#A)

[技术需求的定位](#B)

[不同层次的学习实施方法](#C)




文章主要是以学习一门计算机编程相关技术为目的，其他的知识学习方法类似，具体实施细节可能会不同。

***


<a name="A"></a>

### 技术认知的三个层次

为了之后描述方便，首先给出技术认知的三个大致层次：
![三个层次](http://7xrnwq.com1.z0.glb.clouddn.com/20160802-three-level.jpg)
简洁明了。
再简单介绍下我所理解的这三个层次：

 - 了解：知道这门技术为什么会出现，所解决的问题，大体框架，以及相关的技术栈。In short, 吹牛逼的时候能轻易地拽出这个词，但还没有付诸实践。

 - 熟悉：已经将该技术落实于至少一个项目之上，知道如何使用以及使用过程中会有哪些常见的坑,但内在原理还不甚了解。

 - 精通：读过源码，落实过至少三个项目，原理通透，知晓相比业界其他类似解决方案的pros and cons。
这三个层次也可以理解为渐进式的学习。

<a name="B"></a>

### 技术需求的定位

技术永远是为业务而服务的，我们学习一门技术时最好先找准自己对技术需求的定位。找到自己的定位就容易理清主线，不至于产生“乱”的感觉。技术需求也可以根据技术认知的三个层次划分。
-- 接触到一项新技术，比较感兴趣或者只想知道该技术的用途以及它所解决的痛点，对技术的认知止于了解层面即可。比较适于技术偏产品的职业。
-- 会用即可，不必了解深层次实现。适用于大部分程序员。
-- 对技术有更高层次的追求，知其所以然，适用于部分程序员。

<a name="C"></a>

### 不同层次的学习实施方法

 * 了解层次：
 1. 官网guide
 2. wiki
 3. 知乎/quora/stackoverflow/github
 4. 知名blog 
 5. google

 * 熟练层次：
 1. 官网doc,完成demo
 2. 找一个经典项目并完成

 * 精通层次
 1. 相关高评分书籍（amazon,豆瓣）
 2. 项目重构
 3. 阅读源码

 ***本篇文章由[pekingzcc](https://zhangchenchen.github.io/)采用[知识共享署名-非商业性使用 4.0 国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)进行许可,转载请注明。***


 ***END***